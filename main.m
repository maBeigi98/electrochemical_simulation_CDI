% ----------------------------------------------------------------------
%  MAIN PROGRAM - generated by the Rappture Builder
% ----------------------------------------------------------------------

% open the XML file containing the run parameters
% the file name comes in from the command-line via variable 'infile'
io = rpLib(infile);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get input values from Rappture
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get input value for input.group(tabs).group(Operation).number(Feed_Concentration)
Feed_Concentration = rpLibGetDouble(io,'input.group(tabs).group(Operation).number(Feed_Concentration).current');

% get input value for input.group(tabs).group(Operation).number(Flow_Rate)
Flow_Rate = rpLibGetDouble(io,'input.group(tabs).group(Operation).number(Flow_Rate).current');

% get input value for input.group(tabs).group(Operation).number(Current_Density)
Current_Density = rpLibGetDouble(io,'input.group(tabs).group(Operation).number(Current_Density).current');

% get input value for input.group(tabs).group(Operation).number(Maximum_Voltage)
Maximum_Voltage = rpLibGetDouble(io,'input.group(tabs).group(Operation).number(Maximum_Voltage).current');

% get input value for input.group(tabs).group(Operation).number(Minimum_Voltage)
Minimum_Voltage = rpLibGetDouble(io,'input.group(tabs).group(Operation).number(Minimum_Voltage).current');

% get input value for input.group(tabs).group(Operation).number(Cycle_Number)
Cycle_Number = rpLibGetDouble(io,'input.group(tabs).group(Operation).number(Cycle_Number).current');

% get input value for input.group(tabs).group(Cell_Design).number(Lenth)
Length = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(Lenth).current');

% get input value for input.group(tabs).group(Cell_Design).number(Pos_Ele_Thickness)
Pos_Ele_Thickness = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(Pos_Ele_Thickness).current');

% get input value for input.group(tabs).group(Cell_Design).number(Neg_Ele_Thickness)
Neg_Ele_Thickness = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(Neg_Ele_Thickness).current');

% get input value for input.group(tabs).group(Cell_Design).number(Flow_Channel_Thickness)
Flow_Channel_Thickness = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(Flow_Channel_Thickness).current');

% get input value for input.group(tabs).group(Cell_Design).number(FC_Porosity)
FC_Porosity = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(FC_Porosity).current');

% get input value for input.group(tabs).group(Cell_Design).number(Macroporosity)
Macroporosity = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(Macroporosity).current');

% get input value for input.group(tabs).group(Cell_Design).number(Microporosity)
Microporosity = rpLibGetDouble(io,'input.group(tabs).group(Cell_Design).number(Microporosity).current');

% get input value for input.group(tabs).group(Leakage_current).number(I0_Carbon)
I0_Carbon = rpLibGetDouble(io,'input.group(tabs).group(Leakage_current).number(I0_Carbon).current');

% get input value for input.group(tabs).group(Surface_Charge).number(Immobile_Charge_pos)
Immobile_Charge_pos = rpLibGetDouble(io,'input.group(tabs).group(Surface_Charge).number(Immobile_Charge_pos).current');

% get input value for input.group(tabs).group(Surface_Charge).number(Immobile_Charge_neg)
Immobile_Charge_neg = rpLibGetDouble(io,'input.group(tabs).group(Surface_Charge).number(Immobile_Charge_neg).current');

% get input value for input.group(tabs).group(Surface_Charge).number(PZC_pos)
PZC_pos = rpLibGetDouble(io,'input.group(tabs).group(Surface_Charge).number(PZC_pos).current');

% get input value for input.group(tabs).group(Surface_Charge).number(PZC_neg)
PZC_neg = rpLibGetDouble(io,'input.group(tabs).group(Surface_Charge).number(PZC_neg).current');

% get input value for input.group(tabs).group(Computation).number(dt_record)
dt_record = rpLibGetDouble(io,'input.group(tabs).group(Computation).number(dt_record).current');

% get input value for input.group(tabs).group(Computation).number(dt)
dt = rpLibGetDouble(io,'input.group(tabs).group(Computation).number(dt).current');

% get input value for input.group(tabs).group(Computation).number(dx)
dx = rpLibGetDouble(io,'input.group(tabs).group(Computation).number(dx).current');

% get input value for input.group(tabs).group(Computation).number(dy) dy = rpLibGetDouble(io,'input.group(tabs).group(Computation).number(dy).current');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Add your code here for the main body of your program
[T, V, C] = CDI_2D_Demo(Feed_Concentration, Flow_Rate,...
            Current_Density, Immobile_Charge_pos, Immobile_Charge_neg,...
            Maximum_Voltage, Minimum_Voltage, Cycle_Number, ...
            Length, Pos_Ele_Thickness, Neg_Ele_Thickness, ...
            Flow_Channel_Thickness, FC_Porosity, Macroporosity, Microporosity, ...
            dt_record)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% spit out progress messages as you go along...
rpUtilsProgress(0, 'Starting...');
rpUtilsProgress(5, 'Loading data...');
rpUtilsProgress(50, 'Half-way there');
rpUtilsProgress(100, 'Done');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Save output values back to Rappture
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% save output value for output.curve(Cell_Voltage)
% this assumes a vector 'x' and a vector 'y'
xydata = [T; V];
str = sprintf('%12g %12g\n', xydata);
rpLibPutString(io,'output.curve(Cell_Voltage).component.xy',str,0);

% save output value for output.curve(Effluent_Concentration)
% this assumes a vector 'x' and a vector 'y'
xydata = [T; C];
str = sprintf('%12g %12g\n', xydata);
rpLibPutString(io,'output.curve(Effluent_Concentration).component.xy',str,0);


rpLibResult(io);
quit;
